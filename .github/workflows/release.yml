# This workflow will create a release and store builds to it when an x.y.z tag is pushed

name: Release

on:
  push:
    tags:
      - '*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions: write-all
    strategy:
      matrix:
         node-version: [20.x]
    steps:
      - uses: actions/checkout@latest
      - name: build with node.js
        uses: actions/setup-node@latest
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install typescript -g
      - run: npm ci
      - run: npm run build --if-present
      - run: zip -r yoshis-island-tracker.zip *.html js css images
      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./yoshis-island-tracker.zip
          asset_name: yoshis-island-tracker.zip
          asset_content_type: application/zip
